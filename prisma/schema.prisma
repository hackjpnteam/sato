// GENERATED: 半導体在庫売買サイト（Claude Rule適用）

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーロール（配列で複数ロール対応）
enum Role {
  admin
  operator
  seller
  buyer
}

// セラーティア
enum SellerTier {
  T0  // listingCap=10, holdDays=7
  T1  // listingCap=50, holdDays=3
  T2  // listingCap=100, holdDays=0
}

// KYCステータス
enum KycStatus {
  pending
  verified
  restricted
}

// 出品ステータス
enum ListingStatus {
  pending
  listed
  rejected
  suspended
}

// 注文ステータス
enum OrderStatus {
  created
  paid
  fulfilled
  refunded
  canceled
  disputed
}

// 返金ステータス
enum RefundStatus {
  pending
  succeeded
  failed
}

// 支払いステータス
enum PayoutStatus {
  scheduled
  paid
  failed
}

// レポートステータス
enum ReportStatus {
  pending
  reviewing
  resolved
  dismissed
}

// ユーザー（roles統合版）
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  passwordHash      String?
  roles             Role[]    @default([buyer])  // 配列化：buyer/seller兼務可能
  name              String?   // 表示名
  companyName       String?   // 会社名
  companyAddress    String?   // 会社住所  
  contactPerson     String?   // 担当者名
  phoneNumber       String?   // 電話番号
  taxId             String?   // 法人番号
  businessLicense   String?   // 事業許可証番号
  stripeCustomerId  String?   @unique
  emailVerified     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  sellerProfile     SellerProfile?
  listings          Listing[]
  buyerOrders       Order[]       @relation("BuyerOrders")
  auditLogs         AuditLog[]
  messages          Message[]
  reports           ReportContentFlag[]
  sessions          Session[]
  accounts          Account[]
}

// セラープロフィール（seller ロール時のみ作成）
model SellerProfile {
  id                String      @id @default(cuid())
  userId            String      @unique
  stripeConnectId   String?     @unique
  payoutsEnabled    Boolean     @default(false)
  kycStatus         KycStatus   @default(pending)
  tier              SellerTier  @default(T0)
  listingCap        Int         @default(10)
  holdDays          Int         @default(7)
  
  // 統計（自動更新）
  totalOrders       Int         @default(0)
  fulfilledOrders   Int         @default(0)
  canceledOrders    Int         @default(0)
  averageRating     Float       @default(0)
  ratingCount       Int         @default(0)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth用アカウント
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth用セッション
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 出品
model Listing {
  id               String        @id @default(cuid())
  mpn              String        // 型番
  quantity         Int           // 数量
  dateCode         String        // デートコード
  sourceRoute      String        // 入手経路
  warranty         Boolean       // メーカー保証
  pricePerUnitJPY  Int          // 1個単価（円）
  photos           String[]      // 写真URL配列
  description      String?       // 説明
  status           ListingStatus @default(pending)
  sellerId         String
  seller           User          @relation(fields: [sellerId], references: [id])
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  orders           Order[]
  priceSnapshots   MarketPriceSnapshot[]
  reports          ReportContentFlag[]

  @@index([mpn])
  @@index([status])
  @@index([sellerId])
}

// 相場価格スナップショット
model MarketPriceSnapshot {
  id              String   @id @default(cuid())
  mpn             String
  source          String   // Octopart, DigiKey, Mouser等
  unitPriceJPY    Int?     // 単価（円）
  stock           Int?     // 在庫数
  currency        String?  // 元通貨
  fetchedAt       DateTime @default(now())
  listingId       String?
  listing         Listing? @relation(fields: [listingId], references: [id])

  @@index([mpn])
  @@index([fetchedAt])
}

// 注文
model Order {
  id                    String      @id @default(cuid())
  orderNumber           String      @unique @default(cuid())
  buyerId               String
  buyer                 User        @relation("BuyerOrders", fields: [buyerId], references: [id])
  listingId             String
  listing               Listing     @relation(fields: [listingId], references: [id])
  quantity              Int         // 購入数量
  unitPriceJPY          Int        // 購入時の単価
  totalJPY              Int        // 合計金額
  applicationFeeJPY     Int        // 手数料
  sellerAmountJPY       Int        // 売主受取額
  stripePaymentIntentId String?    @unique
  stripeCheckoutSessionId String?  @unique
  status                OrderStatus @default(created)
  shippingAddress       String?
  note                  String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  refunds               Refund[]
  payouts               Payout[]
  messages              Message[]

  @@index([status])
  @@index([buyerId])
}

// 返金
model Refund {
  id              String       @id @default(cuid())
  orderId         String
  order           Order        @relation(fields: [orderId], references: [id])
  amountJPY       Int
  reason          String?
  stripeRefundId  String?      @unique
  status          RefundStatus @default(pending)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

// 売上振込
model Payout {
  id               String       @id @default(cuid())
  sellerId         String
  orderId          String
  order            Order        @relation(fields: [orderId], references: [id])
  amountJPY        Int
  stripeTransferId String?      @unique
  status           PayoutStatus @default(scheduled)
  failureReason    String?
  scheduledFor     DateTime?
  paidAt           DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([sellerId])
  @@index([status])
}

// 手数料ポリシー
model FeePolicy {
  id                    String   @id @default(cuid())
  applicationFeePercent Float    // 手数料率（%）
  minFeeJPY            Int      // 最小手数料（円）
  active               Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

// 監査ログ
model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String?
  actorUser   User?    @relation(fields: [actorUserId], references: [id])
  action      String   // approve_listing, reject_listing, refund_order等
  targetType  String   // listing, order, user等
  targetId    String
  payload     Json?    // 詳細データ
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@index([actorUserId])
  @@index([targetType, targetId])
  @@index([createdAt])
}

// 通報・フラグ
model ReportContentFlag {
  id         String       @id @default(cuid())
  targetType String       // listing, user等
  targetId   String
  reporterId String
  reporter   User         @relation(fields: [reporterId], references: [id])
  reason     String
  details    String?
  status     ReportStatus @default(pending)
  listingId  String?
  listing    Listing?     @relation(fields: [listingId], references: [id])
  resolvedBy String?
  resolvedAt DateTime?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([targetType, targetId])
  @@index([status])
}

// メッセージ（問い合わせ）
model Message {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  content   String   @db.Text
  createdAt DateTime @default(now())

  @@index([orderId])
}

// システム設定
model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}